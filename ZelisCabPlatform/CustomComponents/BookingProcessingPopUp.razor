<style>
    .modal-content {
        width: auto; /* Adjust the width based on content */
        max-width: 80%; /* Set a maximum width if necessary */
        background-color: #fff;
        border-radius: 10px;
        overflow: hidden;
        position: fixed;
        top: 30%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1001;
    }
    
    .fade{
        width:100%;
        height:100%;
        background: rgba(0, 0, 0, 0.5);
       
    }
</style>
@if (IsModalVisible)
{
    <div class="modal  fade show d-block  " id="exampleModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">

                <div class="d-flex justify-content-end p-2">

                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="()=>CloseModal()"></button>

                </div>

                <div class="modal-body">

                    @Component
                </div>

               

            </div>
        </div>
    </div>
}
@code {
    [Parameter] public RenderFragment Component { get; set; }
    [Parameter] public string? ButtonName { get; set; }

    public bool IsModalVisible { get; set; } = false;

    // [Parameter]
    // public EventCallback<bool> OnCancel { get; set; }

    //public EventCallback<bool,int?> OnCancel { get; set; }
    public async Task ShowModal()
    {
        IsModalVisible = true;
        await this.InvokeAsync(this.StateHasChanged);

    }
    public void CloseModal()
    {
        IsModalVisible = false;
        this.StateHasChanged();

    }
    protected async Task CancelConfirmed(bool value)
    {
        IsModalVisible = false;
        // if (value)
        // {
        //     OnCancel.InvokeAsync(value);
        // }

    }
}