@page "/roster/{id?}"
@using System.ComponentModel.DataAnnotations
@inject LoginService loginservice
@inject CabService cabservice
@using Blazored.Toast.Configuration
@using ZelisCabPlatform.HelperMethods

@inject Blazored.Toast.Services.IToastService ToastService
@inject NavigationManager navigationManager
<PopUp @ref="popup" ConfirmationMessage="Roster created successfly.." ConfirmationNeeded="@false" IsCancelNeeded="@false" />
<div>
    <div class="text-center fs-2 ">Weekly Roster</div>
    <EditForm Model="weeklyroster" OnValidSubmit="handlerostersubmit">
   
        <DataAnnotationsValidator />
        
    <div class="d-flex justify-content-between">
        <div>
        <label class="form-label">Start Date</label>
          
            <input @bind="startdate" class="form-control" min="@DateTime.Now.ToString("yyyy-MM-dd")" type="date" />

           @*  <button @onclick="() => { startdate = startdate.AddDays(7); StateHasChanged(); }">Increment Start Date</button>
            @if (repeat == "Custom")
            {
                <input @bind="enddate" class="form-control" min="@DateTime.Now.ToString("yyyy-MM-dd")" type="date"/>

            } *@
        </div>
        <div class="d-flex gap-2 align-items-center" style="height:60px;">
            <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault" @onchange="HandleToggleBtn" />
                <label class="form-check-label" for="flexSwitchCheckDefault">Apply to all</label>
            </div>
           @* <div >
            <label class="form-label">Repeat</label>
            <select class= "form-control" @bind="repeat">
                    <option class="form-control" value="Weekly">Weekly</option>
                  
                    <option class="form-control" value="Custom">Custom</option>
               
            </select>
            </div> *@
        </div>
    </div>
    <div class="mt-3">
        <table class="table table-bordered table-hover">
            <thead class="table bg-warning">
                <tr class="d-table-row">
                <th>Day</th>
                <th>PickUp Location</th>
                <th>Drop Location</th>
                <th>Shift</th>
                <th>PickUp Time</th>
                </tr>
            </thead>
            <tbody>
                @for(int i=0;i<daysOfWeek.Count;i++){
                        RosterInfo rostermodel = weeklyroster.ElementAtOrDefault(i) ?? new RosterInfo();
                   
                    <tr class="d-table-row">
                        <td class="d-table-cell">@(startdate.AddDays(i).ToString("yyyy-MM-dd") + " " + @daysOfWeek[i])</td>
                        <td class="d-table-cell">

                                <InputText @bind-Value="rostermodel.pickup" class="form-control" placeholder="Pickup Location" />
                                <ValidationMessage class="text-danger" For="@(() => rostermodel.pickup)" />
                            </td>
                        <td class="d-table-cell"> 
                            <InputText type="text" class="form-control" placeholder="Drop Location" @bind-Value="rostermodel.drop" />
                                <ValidationMessage class="text-danger" For="@(() => rostermodel.drop)" />
                            </td>
                        <td class="d-table-cell">
                            <InputSelect class="form-control form-select" @bind-Value="rostermodel.shift">
                                <option class="form-control" value="0">select</option>
                                <option class="form-control" value="1">Shift 1</option>
                                <option class="form-control" value="2">Shift 2</option>
                                <option class="form-control" value="3">Shift 3</option>
                                <option class="form-control" value="4">Leave</option>
                                <option class="form-control" value="5">Week off</option>
                             
                                
                            </InputSelect>
                                <ValidationMessage class="text-danger"  For="@(() => rostermodel.shift)" />
                        </td>
                        <td>
                                <InputDate Type="InputDateType.Time" @bind-Value="@rostermodel.PickupDateTime" Format="HH:mm tt" class="form-control" />
                          
                        </td>
                     
                        </tr>
                        rostermodel.employeeid = loginservice.employee.EmployeeId;
                        if(weeklyroster.ElementAtOrDefault(i)==null) weeklyroster.Add(rostermodel);
                        @*  weeklyroster.Add(new RosterInfo(rostermodel.pickup,rostermodel.drop,rostermodel.shift,loginservice.employee.EmployeeId)); weeklyroster[i] = rostermodel; *@
                }
            </tbody>
        </table>
    </div>
    <button type="submit" class="btn btn-primary">create</button>
    </EditForm>
</div>
@code {
    [Parameter] public string id { get; set; }
    DateTime startdate { get; set; } = DateTime.Now.Date;
    DateTime enddate{ get; set; }
    string repeat { get; set; } = "Weekly";
    RosterInfo rostermodell=new RosterInfo();
    PopUp popup;
    bool isChecked = false;

    List<string> daysOfWeek = new List<string>
{
    "Mon", "Tue", "Wed", "Thu", "Fri","Sat","Sun"
};

    List<RosterInfo> weeklyroster;
    private void ResetBack()
    {
        for (int i = 1; i < daysOfWeek.Count; i++)
        {
            weeklyroster[i] = new RosterInfo() { dateofbooking = startdate.AddDays(i) };
        }
    }

    protected override async Task OnInitializedAsync()
    {

        await loginservice?.SetEmployee();
        weeklyroster = Enumerable.Range(0, 7)
            .Select((_,i) => new RosterInfo() { dateofbooking=startdate.AddDays(i) })
            .ToList();
        if (!string.IsNullOrEmpty(id))
        {
            int val = int.Parse(id);

            weeklyroster = await cabservice.GetRosterInfoById(val);
            startdate = weeklyroster[0].dateofbooking;
            for (int i = 0; i < weeklyroster.Count; i++)
            {
                weeklyroster[i].dateofbooking = startdate.AddDays(i);
            }
        }
    }
    private async Task handlerostersubmit()
    {
        bool valid = false;

        List<RosterInfo> list = new List<RosterInfo>();
        for (int i= 0;i<weeklyroster.Count;i++)
        {
            RosterInfo roster =weeklyroster[i];
            if (IsValid<RosterInfo>(roster))
            {

                valid = true;
            }
            else
            {
                valid = false;
                ToastService.ShowError("Please fill all the fields.", settings => { settings.Position = ToastPosition.TopRight; settings.Timeout = 10; settings.ShowProgressBar = true; });
                break;
            }
        }
        if (valid)
        {
            for (int i = 0; i < weeklyroster.Count; i++)
            {
                weeklyroster[i].dateofbooking = startdate.AddDays(i);
            }
            List<RosterInfoRequest> convertedlist = HelperMethodsForTranslations.ConvertToRosterInfoList(weeklyroster);
            RosterRequest res = await cabservice.CreateRoster(convertedlist, startdate);
            if (res!=null && res.Id!=0)
            {
                bool val = await cabservice.WeeklyBookings(convertedlist, res.Id);
                if (val)
                {
                    popup.ShowModal();
                    await Task.Delay(5000);
                    navigationManager.NavigateTo("/cabservice");
                }
            }
        }
    }
    private bool IsValid<T>(T obj)
    {
        var validationContext = new ValidationContext(obj);
        var validationResults = new List<ValidationResult>();

        return Validator.TryValidateObject(obj, validationContext, validationResults, validateAllProperties: true);
    }
    private void ApplyToAll()
    {
        for(int i = 1; i < daysOfWeek.Count; i++)
        {
            weeklyroster[i] = new RosterInfo()
                {
                    pickup = weeklyroster[0].pickup,
                    drop = weeklyroster[0].drop,
                    employeeid = weeklyroster[0].employeeid,
                    pickupTime = weeklyroster[0].pickupTime,
                    dateofbooking = weeklyroster[i].dateofbooking,
                    shift = weeklyroster[0].shift,
                    droptime = weeklyroster[0].droptime

                };
        }
    }
    private void HandleToggleBtn(ChangeEventArgs e)
    {
        isChecked = (bool)e.Value;
        if (isChecked)
        {
            ApplyToAll();
        }
        else
        {
            ResetBack();
        }
    }
}
